#include<iostream>
using namespace std;

int main() {
    ios::sync_with_stdio(0);
    cin.tie(0);
    // 일단 0.5초 시간 제한 체크
    // 아마도 이중 배열 사용하는거 불가능할 듯
    // .,..,.,.,. 1 2 3 4분면
    // n = 2일 때 , 0 4 8 12 / 1 5 9 13 / 2 6 19 14 / 3 7 11 15
    // n = 3일 때 , 0
    // n = 2일 때는 사분면 수에 직접 접근할 숩 잇지만, 그 이후부터는 불가능,,,
    // 근데 뭐 일단 사분면으로 나눠서 r,c 좌표에 접근해야됨

    // n = 2일 때 4 * 4 (3,1) 3사분면, n = 3일 때 8 * 8 (7,7) 4사분면
    // n = 2일 때 2 * 2로 분할 크게 1,2,3,4로 나뉜다. 그리고 거기서 4에 위치
    // 그러면 1일 때 +4, 2일때 + 4, 3일 때 + 3

    // n = 3일 때 4 * 4로 분할 , 거기서 4에 4 4 위치
    // 16 + 16 + 16 + 4 + 4 + 4 + 3 = 63

    int n,r,c, total = 0;

    cin >> n >> r >> c;

    // n = 2  3,1 = 11 / n = 3  7,7 = 63
    // 2 ** n x 2 ** n
    // 3,1이면 세로 가로이기 때문에 y,x
    int sq = 1 << n; // 2 ** n;

    // 2,3,1 이면 3사분면으로 가서 8더해짐, sq /= 2이면 sq = 1 (1,1)이니까 4사분면
    // 현재 plus = 1이니까 +3해서 11
    while(sq > 1) {
        sq /= 2; // n = 2일 때 4에서 2 * 2로 변경
        int plus = sq * sq;

        if(c < sq && r < sq) { // 1
            // 0 1 2 3
        }
        if(c >= sq && r < sq) { // 2
            total += plus; // +4
            c -= sq;
        }
        if(c < sq && r >= sq) { // 3 , (3,1) 해당  3의 4에 해당
            total += 2 * plus; // 8
            r -= sq;
        }
        if(c >= sq && r >= sq) { // 4
            total += 3 * plus;
            c -= sq;
            r -= sq;
        }
    }
    cout << total << "\n";
}